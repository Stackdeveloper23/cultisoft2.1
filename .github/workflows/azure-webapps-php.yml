# This workflow will build and push a PHP application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-php?pivots=platform-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and PHP_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy Laravel app to Azure Web App

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: backendCultisoft   
  AZURE_WEBAPP_PACKAGE_PATH: './backend' # Path al proyecto Laravel
  PHP_VERSION: '8.2'                     

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2

      - name: Check PHP Version
        run: php -v
        
      - name: Clear Composer Cache
        run: composer clear-cache

      - name: Check if composer.json exists
        id: check_files
        uses: andstor/file-existence-action@v2
        with:
          files: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/composer.json'

      - name: Get Composer Cache Directory
        id: composer-cache
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Set up dependency caching for faster installs
        uses: actions/cache@v3
        if: steps.check_files.outputs.files_exists == 'true'
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # Paso para asegurar que el directorio existe
     # - name: Ensure backend directory exists
      #  run: |
       #   mkdir -p ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    
      - name: Run composer install if composer.json exists
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          composer validate --no-check-publish
          composer install --prefer-dist --no-progress --no-scripts
          php artisan key:generate
          php artisan config:cache
          
      - name: Check if the backend directory is correct
        run: pwd
        
      - name: List files in the backend directory
        run: |
          ls -la ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
    
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: phpApp
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          if-no-files-found: error

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: phpApp

      - name: Pwd files in frontend directory after download
        run: pwd
      
      - name: List files in frontend directory after download
        run: ls -la

      - name: Check PHP Version on Azure
        run: |
          php -v

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: .

      # Step to run migrations
      - name: Run Laravel Migrations
        run: |
          php artisan migrate --force

      # Step to run seeders
      - name: Run Laravel Seeders
        run: |
          php artisan db:seed --force
